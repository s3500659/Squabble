// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Squabble.Data;

namespace Squabble.Migrations
{
    [DbContext(typeof(SquabbleContext))]
    [Migration("20211126160001_InitDatabase")]
    partial class InitDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Squabble.Models.Channel", b =>
                {
                    b.Property<int>("ChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AzureChatThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("ChannelId");

                    b.HasIndex("ServerID");

                    b.ToTable("Channels");

                    b.HasData(
                        new
                        {
                            ChannelId = 1,
                            AzureChatThreadId = "19:72GBN-_cGQFjcBmNJPea-Cht8fJn0bl8UoH7Wvjx9NM1@thread.v2",
                            ChannelName = "Test Channel",
                            ServerID = 1
                        },
                        new
                        {
                            ChannelId = 2,
                            AzureChatThreadId = "19:v4z-VSpQNysbuapG1LFWzeX4MkdpI7r0eSmUI1MjAqM1@thread.v2",
                            ChannelName = "1-2"
                        });
                });

            modelBuilder.Entity("Squabble.Models.ChannelMember", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChannelMembers");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            ChannelId = 2
                        },
                        new
                        {
                            UserID = 2,
                            ChannelId = 2
                        });
                });

            modelBuilder.Entity("Squabble.Models.Entities.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimePosted")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Squabble.Models.Entities.User", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSso")
                        .HasColumnType("bit");

                    b.Property<string>("MicrosoftSsoId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDA4LWQxMzgtNGJmZS05NTNhMGQwMDkyNzAiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc5NDIzOTciLCJleHAiOjE2MzgwMjg3OTcsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzk0MjM5N30.N4SQJYPEZFRLeoQaqWAKdx2g4sGRSbGl6Ak1UvnJEXy2qtwj4E78pkDNWd_xM1QI6AI0N6Fq3uJ5L32Rvhj3-yekOoBPvsZEpS78l776I4LYqR4XLALHKDsMVNnYwLbgvjuiGL3eJq_yfODzqtLoIZOWQyiW5ioKGSLTuEMmJUU3XM_C8cfjSXZ9WEPlQKiCcDppmfQgPIVhn_daKmy4Q4VN-C7IUnxuUiQdx-NNlWqxoxl_csPs1KlXPLmB7lT7fLqJbdIzc977jTQLFRg6c45W4rowAS9B5X5HRAejhs3obA7MvFuq4GcSjAMkc1eTnJCIZ76l1Z5Jj0IZRjdtMw",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd08-d138-4bfe-953a0d009270",
                            Email = "test1@test.com",
                            FirstName = "Test",
                            IsSso = false,
                            MiddleName = "Ing",
                            Surname = "Dummy",
                            UserName = "Dragonborn"
                        },
                        new
                        {
                            AccountId = 2,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDA5LTcyZWItNGJmZS05NTNhMGQwMDkyN2EiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc5NDIzOTciLCJleHAiOjE2MzgwMjg3OTcsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzk0MjM5N30.JgUset_wettClxuqDidTKHuc8y_08oeIcStFqMr1rVa8p5YmwloLum_K4fEtCgTHX8cI7CFEOGYY5bSZsJiR-B23VdQXYYQVgUb22CP7GNmSEm_F2uZyXiPcqFElQe3s_GzH96v_dnttC4b6Tma4Sjwao3Pzemn4Vkz-dyk6i3I2Nlb_CdmhCRQ2jDDkgkKiy0Dq8weM_DVqjpJd8YqgWs3S5Na5L2zQ0FC15wx0nz6gbY9F-rE8P2vBaFqFibjtEY4TLsmVi_yA3_VobzTZ6Fgj7KWIiHRDOnN3P0CYSV_KAgn8e--xOegXYpDLDAdu0Ik4e0Cala4g0-y8dtL6Yw",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd09-72eb-4bfe-953a0d00927a",
                            Email = "test2@test.com",
                            FirstName = "Flim",
                            IsSso = false,
                            MiddleName = "",
                            Surname = "Flam",
                            UserName = "Hayzeus"
                        },
                        new
                        {
                            AccountId = 3,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDA5LWJkMmQtNGJmZS05NTNhMGQwMDkyN2MiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc5NDIzOTgiLCJleHAiOjE2MzgwMjg3OTgsImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzk0MjM5OH0.dusS7seOIx6NmjTA7Za-pNl7ePK4MH-r10rqO3Qv1OxUyPWfYgI7SP2DIWpbbyq3KlT029s5Mmerrefw8ZzWGnzA2GgA7B3Xief7gEzffsYRzZtiKWWwRz0C5AJfl3k0mJm54kZJ12i84Fh_eZmEXlRS5cHTQyCSBPsSVt9wMaGBG34ccL4Z1fiVFIlVv4OOCSMg9FGh07yyq1vc7rlFP-EJoo5pU3atnW6ZAdqjjVSIBB6N_O2b4OfNaMIVHe6Rc7-tFzS-sPTVULeaaMm8AEiPPR17VAImcOZEUkfCzOuJ7rjbeQx_Uj94f8_CDDjR4rBPZyYvcwLBgxHrbujwbQ",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd09-bd2d-4bfe-953a0d00927c",
                            Email = "test3@test.com",
                            FirstName = "Bob",
                            IsSso = false,
                            MiddleName = "The",
                            Surname = "Builder",
                            UserName = "Handyman"
                        },
                        new
                        {
                            AccountId = 4,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDBhLTA5ZjItNGJmZS05NTNhMGQwMDkyODAiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc5NDIzOTkiLCJleHAiOjE2MzgwMjg3OTksImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzk0MjM5OX0.T_8ajqKKjOrGyvfJonuCgtnvYWSOyc9UhCEt4botBMrkKFYp_SKFArZZ1_vcJckJ1YXEtbLYBCtPYvWD9wXrXwKFw1ucSCCEE8KFBa4FJ-B7PWUEUdfbX7cUo0Yo_s2d1kfF0isHDBuia916w2OeHJvCM6DwXPiu7gbhxh2wiPHu8dLP62RwAtRfnfzjJRDcInhqwWYjgnjMRSmiIFDEloZ-g2G2lMkADbwfgNi3YFwGsYKTwwqjQ-4DTgstU229I-NqpbEhEMGjFb3OJ7M9NYqyeksSIT4rbnpsQ7SfsL-xCuxmkcX9HnxuOZi9nPDNHjfjelgL1RPAFcmBRJEaIQ",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd0a-09f2-4bfe-953a0d009280",
                            Email = "bikinibottom1@test.com",
                            FirstName = "Spongebob",
                            IsSso = false,
                            MiddleName = "",
                            Surname = "Squarepants",
                            UserName = "Spongebob"
                        },
                        new
                        {
                            AccountId = 5,
                            CommunicationToken = "eyJhbGciOiJSUzI1NiIsImtpZCI6IjEwMyIsIng1dCI6Ikc5WVVVTFMwdlpLQTJUNjFGM1dzYWdCdmFMbyIsInR5cCI6IkpXVCJ9.eyJza3lwZWlkIjoiYWNzOjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOF8wMDAwMDAwZC1kZDBhLTQ2YmEtNGJmZS05NTNhMGQwMDkyODIiLCJzY3AiOjE3OTIsImNzaSI6IjE2Mzc5NDIzOTkiLCJleHAiOjE2MzgwMjg3OTksImFjc1Njb3BlIjoiY2hhdCx2b2lwIiwicmVzb3VyY2VJZCI6IjAyNWZiYzQ4LThlYTEtNGNiMi05NTljLTQyYjRkYzllOTcyOCIsImlhdCI6MTYzNzk0MjQwMH0.axECfPzLKwKUEMUTKgW0E2vC1Tkf45TuUzAJFlmFtgLGj1-jmQC92EHktCQp466JKUUmPmGx883aJbCErI3rgaoKq3rTt4Ew_NEbTA1thMC3h_rbHU81n3uOp1_Uujq-0BEeC8u3QvJEgBp6FfMVOhTqPmoutaTkuDNMTGwI97liXGhUDFlI7z_HfUssRBUQThYPlIlXpDOOmGFVXaPlrHDPQpHl9h7BdovbSUPK_-bf7AyRIIjbEQqggJlUHDjMsgRf5vvJYnIYX0yhZPY1ksOVci7SD7z6m9jW47kJNpcMs9BNwRCUzYYvHBGOGfQP7_UMySFL41ruRJXtH9M0Qw",
                            CommunicationUserId = "8:acs:025fbc48-8ea1-4cb2-959c-42b4dc9e9728_0000000d-dd0a-46ba-4bfe-953a0d009282",
                            Email = "bikinibottom2@test.com",
                            FirstName = "Squidward",
                            IsSso = false,
                            MiddleName = "",
                            Surname = "Tentacles",
                            UserName = "Squidward"
                        });
                });

            modelBuilder.Entity("Squabble.Models.FriendRequest", b =>
                {
                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<bool?>("Accepted")
                        .HasColumnType("bit");

                    b.Property<int>("FriendRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SenderID", "ReceiverID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("Squabble.Models.Friendship", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("FriendID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FriendID");

                    b.HasIndex("FriendID");

                    b.ToTable("Friendships");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            FriendID = 2
                        },
                        new
                        {
                            UserID = 2,
                            FriendID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.KanbanItem", b =>
                {
                    b.Property<int>("KanbanItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("KanbanItemID");

                    b.HasIndex("UserID");

                    b.ToTable("KanbanItems");
                });

            modelBuilder.Entity("Squabble.Models.Login", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityAnswerOne")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityAnswerTwo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityQuestionOne")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SecurityQuestionTwo")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Email", "UserName");

                    b.HasIndex("AccountId");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            Email = "bikinibottom1@test.com",
                            UserName = "Spongebob",
                            AccountId = 4,
                            PasswordHash = "Rph6QCIDFUXeBeO/bzoz1GHhfektxxK2otpPlGVaMjSCsA3v94xsSW5eQp8fJatL",
                            SecurityAnswerOne = "D/4BXLY97RrlWB1sZkpiaENp6fZ0jFI7MfXSkr0gjGxi94EjmFAjnE8wFtXXpYPK",
                            SecurityAnswerTwo = "3YmO+y/WuyZnulabttK9LV08zfzHEg6C5xU4NoEOBCw0O5FrW8kiM+9xgjLlU5e6",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "bikinibottom2@test.com",
                            UserName = "Squidward",
                            AccountId = 5,
                            PasswordHash = "ImjptL4PWrb8qn++FxpTGE9t2sU6+69ZYwzdgrmNjRH/DQE0w3AdsJy6xEdoiOdg",
                            SecurityAnswerOne = "BQHhzeispQfU1HKBGRDt9v4k4WKEEYjUBoqt2h6kq4JngdlLUm4H129Q85GJ7ssk",
                            SecurityAnswerTwo = "qCSilrG7z5ak710pWGYHCNasyyP4d6I5/NpKtS1XtD2mRwoBrHNoWFW6kGTvg342",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "test1@test.com",
                            UserName = "Dragonborn",
                            AccountId = 1,
                            PasswordHash = "E4NfjW+2HwFr5GAD8l5X5rFhCVoV80p0/H+yD194tYkrxlRvavi4QwdzAUOQ8oeG",
                            SecurityAnswerOne = "b/lLVjItbp3MDpeq+UZ8Uxq3vlLwr7HfctKPPS5yMcRDiB8JiYy6+ItwEkWrPfo+",
                            SecurityAnswerTwo = "NWfsavEWqbP3bv2BJ7ZddslQ5AG/5934nA9Ey+VGXrXy37frZl+41o0fp1k60UME",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "test2@test.com",
                            UserName = "Hayzeus",
                            AccountId = 2,
                            PasswordHash = "fVl4qgE1l2CWN97Bm+UQdfyxu/CngZxNeun5mSnLZETuCWu0TW2cf2CxSZYG67N2",
                            SecurityAnswerOne = "G+cwgQ1b5R2AFB7Q1jNI9HuqxXitim1tm9uhqXmtDk3RtSIxTPNkjTafRaGgmIUJ",
                            SecurityAnswerTwo = "NWI2aBBnuEatlXk71c+AhLI5ORdWljjs0C7Tbyc1tycWfRXrX/Tmxn0/gsNUFFL5",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        },
                        new
                        {
                            Email = "test3@test.com",
                            UserName = "Handyman",
                            AccountId = 3,
                            PasswordHash = "X/mIqEqIMmgcIVfkR0TZwqzT91eASaPJ9B4uW6FWb8Fv2FGzH2GBsYcmljfTDg0m",
                            SecurityAnswerOne = "74mm5Bl9FOiCPZiEjG8JXOS1oVBnxZA8xZWfQh/d3P7A3SwqdcySVwS2wNpePBNK",
                            SecurityAnswerTwo = "S5/9BNrAiO63+EyoMD+qQ5h4S5ImRcft3G6JY4g/saWHml8V2Kf0Tc+FhWd0+2Uo",
                            SecurityQuestionOne = "My first pet's name?",
                            SecurityQuestionTwo = "My second pet's name?"
                        });
                });

            modelBuilder.Entity("Squabble.Models.Server", b =>
                {
                    b.Property<int>("ServerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServerID");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            ServerID = 1,
                            ServerName = "Test server :)"
                        });
                });

            modelBuilder.Entity("Squabble.Models.ServerAdmin", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ServerID");

                    b.HasIndex("ServerID");

                    b.ToTable("ServerAdmins");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            ServerID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.ServerMember", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "ServerID");

                    b.HasIndex("ServerID");

                    b.ToTable("ServerMembers");

                    b.HasData(
                        new
                        {
                            UserID = 3,
                            ServerID = 1
                        },
                        new
                        {
                            UserID = 4,
                            ServerID = 1
                        },
                        new
                        {
                            UserID = 5,
                            ServerID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.ServerOwner", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ServerID")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ServerID");

                    b.HasIndex("ServerID")
                        .IsUnique();

                    b.ToTable("ServerOwners");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            ServerID = 1
                        });
                });

            modelBuilder.Entity("Squabble.Models.Channel", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithMany("Channels")
                        .HasForeignKey("ServerID");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Squabble.Models.ChannelMember", b =>
                {
                    b.HasOne("Squabble.Models.Channel", "Channel")
                        .WithMany("Members")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany("Channels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.Entities.Post", b =>
                {
                    b.HasOne("Squabble.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.FriendRequest", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "Sender")
                        .WithMany("FriendRequests")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Squabble.Models.Friendship", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany("Friends")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.KanbanItem", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.Login", b =>
                {
                    b.HasOne("Squabble.Models.Entities.User", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Squabble.Models.ServerAdmin", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithMany("Admins")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.ServerMember", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.ServerOwner", b =>
                {
                    b.HasOne("Squabble.Models.Server", "Server")
                        .WithOne("ServerOwner")
                        .HasForeignKey("Squabble.Models.ServerOwner", "ServerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Squabble.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Squabble.Models.Channel", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Squabble.Models.Entities.User", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("FriendRequests");

                    b.Navigation("Friends");
                });

            modelBuilder.Entity("Squabble.Models.Server", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Channels");

                    b.Navigation("Members");

                    b.Navigation("ServerOwner");
                });
#pragma warning restore 612, 618
        }
    }
}
